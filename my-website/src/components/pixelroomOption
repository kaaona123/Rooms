import React, { useState, useEffect } from 'react';
import { useSprings, animated } from '@react-spring/web';
import AnimatedPixelRoom from './AnimatedPixelRoom';

const numRooms = 20;
const roomSize = 50; // pixels
const maxSpeed = 5; // Maximum pixels a room can move per interval

function PixelRooms() {
    const [rooms, setRooms] = useState(() => generateRooms(window.innerWidth - roomSize, window.innerHeight - roomSize));

    function generateRooms(maxWidth, maxHeight) {
        return Array.from({ length: numRooms }, (_, id) => ({
            id,
            x: Math.random() * maxWidth,
            y: Math.random() * maxHeight,
            dx: (Math.random() - 0.5) * 2, // Direction between -1 and 1 for x-axis
            dy: (Math.random() - 0.5) * 2, // Direction between -1 and 1 for y-axis
            speed: Math.random() * maxSpeed, // Random speed for each room
            backgroundColor: `hsl(${Math.random() * 360}, 100%, 70%)`,
            active: false,
            selected: false
        }));
    }

    useEffect(() => {
        const interval = setInterval(() => {
            setRooms(rooms.map(room => {
                let newX = room.x + room.dx * room.speed;
                let newY = room.y + room.dy * room.speed;

                // Boundary checks to reverse direction upon hitting an edge
                if (newX < 0 || newX > window.innerWidth - roomSize) room.dx *= -1;
                if (newY < 0 || newY > window.innerHeight - roomSize) room.dy *= -1;

                return { ...room, x: newX, y: newY };
            }));
        }, 100);
        return () => clearInterval(interval);
    }, [rooms]);

    const springs = useSprings(
        rooms.length,
        rooms.map(room => ({
            to: {
                transform: `translate3d(${room.x}px, ${room.y}px, 0px) scale(${room.active ? 1.5 : 1})`,
                backgroundColor: room.backgroundColor
            },
            from: {
                transform: `translate3d(${room.x}px, ${room.y}px, 0px)`,
                backgroundColor: room.backgroundColor
            },
            config: { mass: 1, tension: 120, friction: 10 },
            reset: true
        }))
    );

    return (
        <div style={{ position: 'absolute', width: '100%', height: '100%', overflow: 'hidden' }}>
            {springs.map((props, index) => (
                <animated.div
                    key={rooms[index].id}
                    onMouseEnter={() => setRooms(prev => prev.map(r => r.id === rooms[index].id ? { ...r, active: true } : r))}
                    onMouseLeave={() => setRooms(prev => prev.map(r => r.id === rooms[index].id ? { ...r, active: false } : r))}
                    style={{ ...props, position: 'absolute', width: `${roomSize}px`, height: `${roomSize}px`, cursor: 'pointer' }}
                >
                    <AnimatedPixelRoom to="/some-path">Room {rooms[index].id}</AnimatedPixelRoom>
                </animated.div>
            ))}
        </div>
    );
}

export default PixelRooms;